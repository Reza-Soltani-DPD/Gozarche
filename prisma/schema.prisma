// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url      = env("DATABASE_URL")
}




//----------------------------------------------------------------------------
//
//
//
//                                 LOGGER MODEL
//
//
//
//----------------------------------------------------------------------------




model dbchanges{
  id          String  @id @default(cuid())
  argdata     String? @db.Text
  userid      String?
  modelName   String?
  actionName  String?
}



//--------------------------------------------------------------------------
//
//
//
//                                    USER MODELS
//
//
//
//-------------------------------------------------------------------------



model user {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  lastname      String?
  email         String?   @unique
  password      String?
  phonenumber   String?   @unique
  imageId       String?
  slug          String?   @unique
  about         String?   @db.Text

  isSuperUser   Boolean          @default(false)
  isStaff       Boolean          @default(false)
  canHaveShop   Boolean          @default(false)
  isActive      Boolean          @default(true)
  isPrivate     Boolean          @default(false)

  emailVerified DateTime?
  birthday      DateTime?
  activefrom    DateTime         @default(now())
  lastlogin     DateTime         @default(now())
  createdAT     DateTime         @default(now())
  updatedAT     DateTime         @updatedAt
  deactivetime  DateTime?

  followers      user[]   @relation("userfollows")
  followings     user[]   @relation("userfollows")
  
  wallet        wallet[]
  accounts       Account[]
  sessions       Session[]
  shops          shop[]
  carts          cart[]
  wishlist       productinventory[]  @relation("productwish")
  orders         order[]
  transactions   transaction[]
  productcomment productcomment[]   
  productrating  productrating[]
  productreview  productreview[]
  postcomments   postcomment[]
  adresses       adress[]
  subscription   subscription[]
  posts          post[]  @relation(name: "postowner")
  readedpost     post[]  @relation(name: "postread")
  messages       message[]
  shopratings    shoprating[]
  shopcomments   shopcomment[]
  productvisit   productvisit[]
}

model wallet {
  id            String           @id @default(cuid())
  describtion   String           @db.Text

  isActive      Boolean          @default(true)
  depositAllow  Boolean          @default(true)
  withrawAllow  Boolean          @default(true)

  createdAT     DateTime         @default(now())
  activefrom    DateTime         @default(now())
  updatedAT     DateTime         @updatedAt 
  deleteAT      DateTime?

  Items     walletItem[]
  wallettransactikons walletTransaction[]

  userid       String
  user         user   @relation(fields: [userid],references: [id])
}

enum wallettransactiontype {
  W2W  //wallet to wallet
  BAT  //bank transaction
}
model walletTransaction {
  id             String   @id   @default(cuid())
  currencyname   String 
  transactiotype wallettransactiontype @default(W2W)
  amount         Float
  fromId         String?   //TODO
  toId           String?   //TODO

  createdAT     DateTime         @default(now())
  updatedAT     DateTime         @updatedAt 

  walletid      String   
  wallet        wallet   @relation(fields: [walletid],references: [id])
}

model walletItem {
  id   String   @id   @default(cuid())
  amount    Float
  walletid  String
  wallet    wallet @relation(fields: [walletid],references: [id])
  currency  currency[]
} 
model currency {
  id         String   @id  @default(cuid())
  name       String
  value      Float
  walletItem walletItem[]
}



model Account {
  id                String  @id @default(cuid()) 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  userId            String
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}



model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}



enum messagetype {
  REQUESTS
  GRANT
  ACTIVATION
  DEACTIVATION
}

model message {
  id           String    @id @default(cuid())
  userid       String?
  fileId       String[]  
  title        String?
  intro        String?
  describtion  String
  read         Boolean   @default(false)
  createdat    DateTime  @default(now())
  updatedat    DateTime  @updatedAt
  responsedate DateTime?
  type         messagetype     @default(REQUESTS)
  user         user?     @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  request      message[] @relation("message")
  response     message[] @relation("message")
}


model adress {
  id          String   @id @default(cuid())
  phonenumber String[] @db.Char(15)
  country     String?  @db.VarChar(150)
  proviance   String?  @db.VarChar(150)
  city        String?  @db.VarChar(150)
  street      String?  @db.VarChar(150)
  alley       String?  @db.VarChar(150)
  line1       String?  @db.VarChar(150)
  line2       String?  @db.VarChar(150)
  postalcode  String?  @db.VarChar(150)
  createdat   DateTime @default(now())
  updatedat   DateTime @updatedAt
  deleteAt    DateTime?
  active      Boolean  @default(true)

  userid      String?
  user        user?    @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}



model subscription {
  id        String            @id @default(cuid())
  duration  DateTime          @db.Timestamp(6)
  isStarted   Boolean           @default(false)
  startedAT DateTime?
  endedAT   DateTime?
  createdAT DateTime          @default(now())
  updatedAT DateTime          @updatedAt
  
  userid    String?
  user      user?             @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  subtypeid String?
  subtype   subscriptiontype? @relation(fields: [subtypeid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}

model subscriptiontype {
  id            String         @id @default(cuid())
  duration      DateTime?      @db.Timestamp(6)
  price         Float?
  discount      Int?
  createdat     DateTime       @default(now())
  updatedat     DateTime       @updatedAt
  discription   String?
  subscriptions subscription[]
}



//--------------------------------------------------------------------------
//
//
//
//                                    PRODUCTS MODELS
//
//
//
//-------------------------------------------------------------------------


enum  producttype {
 PSC
 DIG
}

enum productstatus {
  ACTIVE
  DEACTIVE
  NOPROCE
  OUT
  NOTAVIL
}

model product{
  id             String          @id  @default(cuid())
  title          String 
  slug           String
  summary        String
  type           producttype     @default(PSC)
  sku            String?
  minquant       Float?          @default(1)
  ratingcount    Int             @default(0)
  imageid        String[]
  createdAT      DateTime        @default(now())
  updatedAT      DateTime        @updatedAt
  startedAT      DateTime        @default(now())

  productinv     productinventory[]
  meta           meta[]
  tag            tags[]
  category       category[]
  variants       productvariant[]
  productprop    productprop[]



}


model   discount  {
  id     String     @id  @default(cuid())
  name   String?
  desc   String?
  amount Float?
  active Boolean    @default(true)

  products productinventory[]
}
model productinventory {
  id        String     @id    @default(cuid())
  quant     Float      @default(0)
  price     Float
  createdAT DateTime   @default(now())
  updatedAT DateTime   @updatedAt
  deletedAT DateTime?
  rating         Float?
  status         productstatus   @default(ACTIVE)
  wish           user[]      @relation("productwish")
  visits         productvisit[]
  cartitem       cartitem[]
  comments       productcomment[]
  productrating  productrating[]
  productreview  productreview[]
  orderitem      orderitem[]
  discounts discount[]
  productId String   
  product   product    @relation(fields:[productId],references:[id])
  shopId    String   
  shop      shop       @relation(fields: [shopId],references: [id])
}



model productvisit {
  id             String   @id @default(cuid())
  numberofvisit  Int
  userId         String
  user           user     @relation(fields: [userId],references: [id])  
  productId      String
  product        productinventory  @relation(fields: [productId],references: [id])
}
model productprop {
  id                   String                 @id @default(cuid())
  title                String
  product              product[]
  producpropertiestype producproptype[]
  
}

model producproptype {
  id               String                 @id @default(cuid())
  title            String?
  parent           producproptype[] @relation("producpropertiestype")
  child            producproptype[] @relation("producpropertiestype")
  productprop productprop[]

}
model productvariant {
  id        String        @id @default(cuid())
  value     String?
  sku       String?
  price     Int?
  productid String?
  status    productstatus @default(ACTIVE)
  product   product?      @relation(fields: [productid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}
model productreview {
  id          String   @id @default(cuid())
  title       String?
  userid      String?
  productid   String?
  content     String?
  iframeurl   String?
  createdat   DateTime @default(now())
  updatedat   DateTime @updatedAt
  publishedat DateTime @default(now())
  user        user?    @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  product     productinventory? @relation(fields: [productid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}
model productrating {
  id        String   @id @default(cuid())
  userid    String?
  productid String?
  rate      Int?
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
  user      user?    @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  product   productinventory? @relation(fields: [productid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}


model productcomment {
  id        String              @id @default(cuid())
  title     String              @db.Char(50)
  content   String
  createdat DateTime            @default(now())
  updatedat DateTime            @updatedAt
  deletedat DateTime?
  productid String
  product   productinventory    @relation(fields: [productid],references: [id])
  userid    String?
  user      user?               @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  tags      productcommenttag[]
  parent    productcomment[]    @relation("productcommentparrenting")
  child     productcomment[]    @relation("productcommentparrenting")
}

model productcommenttag {
  id              String           @id @default(cuid())
  tag             String?
  pos             Boolean?
  procductcomment productcomment[]
}


model tags {
  id        String     @id @default(cuid())
  title     String?
  createdat DateTime   @default(now())
  updatedat DateTime   @updatedAt
  meta      tagmeta[]
  category  category[]
  product   product[]
}
model tagmeta {
  id    String  @id @default(cuid())
  title String?
  value String?
  tag   tags[]
}

model meta {
  id       String     @id @default(cuid())
  title    String?
  value    String?
  meta     String?
  product  product[]
  category category[]

}


model category {
  id        String     @id @default(cuid())
  title     String?
  slug      String?
  imgid     String?
  content   String?
  active    Boolean    @default(true)
  tags      tags[]
  meta      meta[]
  createdat DateTime   @default(now())
  updatedat DateTime   @updatedAt
  product   product[]
  parent    category[] @relation("categoryParenting")
  child     category[] @relation("categoryParenting")
}





enum Cartstatus {
  DEACTIVATED
  ACTIVE
  PASS
  ABANDONED
}
model cart {
  id            String    @id @default(cuid())
  token         String
  cartstatus    Cartstatus

  createdAT     DateTime @default(now())
  updatedAT     DateTime @updatedAt
  deactivatedAT DateTime?

  cartitems     cartitem[] 

  userid        String?
  user          user?    @relation(fields: [userid],references: [id])


}

model cartitem{
  id          String   @id  @default(cuid())
  quant       Int      @default(1)
  price       Float?
  discount    Float?
  cost        Float?
  active      Boolean  @default(true)
  decribtion  String   @db.Text

  createdAT   DateTime @default(now())
  updatedAT   DateTime @updatedAt


  cartid      String?
  cart        cart?    @relation(fields: [cartid],references: [id],onUpdate:Cascade,onDelete: Cascade)
  productid   String 
  product     productinventory  @relation(fields: [productid],references: [id])
 
}






//--------------------------------------------------------------------------
//
//
//
//                                   SHOP MODELS
//
//
//
//-------------------------------------------------------------------------


enum shoptype {
  SHOP
  VISITOR
  BIGSHOP
}

model shop{
  id           String @id @default(cuid())
  title        String 
  profile       String?
  slug         String?
  imgid        String?
  description  String?
  phonenumber  String[]
  adress       String[]
  rating       Float?
  active       Boolean         @default(true)
  ratingcount  Int?
  createdat    DateTime        @default(now())
  updatedat    DateTime        @updatedAt
  deletedat    DateTime?
  shoptype     shoptype        @default(SHOP)
  products     productinventory[]
  comments     shopcomment[]
  ratings      shoprating[]
  patment      shoppayment[]
  ownerid      String
  owner        user  @relation(fields: [ownerid],references: [id])
}


model shoprating {
  id        String   @id @default(cuid())
  userid    String?
  shopid    String?
  rate      Int?
  createdat DateTime @default(now())
  user      user?    @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: SetNull)
  shop      shop?    @relation(fields: [shopid], references: [id],onDelete: SetNull, onUpdate: SetNull)
}


model shopcomment {
  id        String   @id @default(cuid())
  userid    String?
  shopid    String?
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
  content   String?
  user      user?    @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  shop      shop?    @relation(fields: [shopid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}

enum paymenttype {
  WITHDRAW
}
enum paymentstatus {
  CREATED
  REQ
  INORDER
  DONE
  FAILD
}

model shoppayment {
  id          String        @id @default(cuid())
  userid      String?
  shopid      String?
  type        paymenttype   @default(WITHDRAW)
  status      paymentstatus @default(CREATED)
  ampount     Int?
  title       String?       @db.VarChar(50)
  createdat   DateTime      @default(now())
  updatedat   DateTime      @updatedAt
  completedat DateTime?
  startedat   DateTime      @default(now())
  content     String?
  shop        shop?         @relation(fields: [shopid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}






//--------------------------------------------------------------------------
//
//
//
//                                 PAYMENT MODELS
//
//
//
//-------------------------------------------------------------------------



model orderitem {
  id        String   @id @default(cuid())
  productid String?  @db.Char(40)
  orderid   String?  @db.Char(40)
  sku       String?  @db.Char(40)
  price     Float?
  discount  Float?
  quant     Int?
  active    Boolean  @default(true)
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
  order     order?   @relation(fields: [orderid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  product   productinventory? @relation(fields: [productid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}



enum orderstatus {
  CHECKEDOUT
  PAID
  SHIPING
  DONE
  ABANDONED
}
enum shipmenttype {
  POST
  ONDOOR
  INCITY
  DOORTEST
  DONE
}
enum shipmentstate {
  INORDER
  READYFORPOST
  POST
  DELIVERED
}

model order {
  id            String        @id @default(cuid()) @db.Char(40)
  session       String?
  token         String?
  status        orderstatus   @default(CHECKEDOUT)
  subtotal      Float         @default(0)
  totaldiscount Float         @default(0)
  tax           Int           @default(0)
  shipment      shipmenttype  @default(POST)
  SHIPMENTCODE  String?
  shipmentstate shipmentstate @default(INORDER)
  shipmentcost  Float         @default(0)
  total         Float         @default(0)
  promo         Float         @default(0)
  grandtotal    Float         @default(0)
  firstname     String?       @db.Char(40)
  lastname      String?       @db.Char(40)
  phonenumber String[]        @db.Char(15)
  country     String?         @db.VarChar(50)
  proviance   String?         @db.VarChar(50)
  city        String?         @db.VarChar(50)
  street      String?         @db.VarChar(50)
  alley       String?         @db.VarChar(50)
  postalcode  String?         @db.VarChar(50)
  content     String?
  createdat     DateTime      @default(now())
  updatedat     DateTime      @updatedAt

  userid        String?       @db.Char(40)
  user          user?         @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  orderitem     orderitem[]
  transaction   transaction[]
}





enum transactiontype {
  ONDOOR
  BANKGW
  BNCARD
  BCNPAY
}
enum transactionbank {
  BMI
  SEP
  ZAR
  idP
  ZIB
  BHM
  MLT
}
enum transactiostatus {
  COMPLETED
  FAILD
  INPROGRES
  SENT
  START
}

model transaction {
  id        String            @id @default(cuid())
  code      String?
  status    transactiostatus? @default(START)
  bank      transactionbank?
  type      transactiontype   @default(BANKGW)
  createdat DateTime          @default(now())
  updatedat DateTime          @updatedAt
  content   String?
  
  userid    String?
  user      user?             @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  orderid   String?
  order     order?            @relation(fields: [orderid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}




//--------------------------------------------------------------------------
//
//
//
//                                    Blog Models
//
//
//
//-------------------------------------------------------------------------


model post {
  id           String         @id @default(cuid())
  title        String?        @db.Char(50)
  headimgurl   String?
  slug         String?        @db.Char(100)
  content      String?
  active       Boolean        @default(true)
  createdat    DateTime       @default(now())
  poblishedat  DateTime       @default(now())
  updatedat    DateTime       @updatedAt
  userid       String?
  owner        user?          @relation(name:"postowner",fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  postcategory postcategory[]
  meta         postmeta[]
  tags         posttags[]
  postcomment  postcomment[]  
  userread     user[]         @relation("postread")
}


model postcategory {
  id         String         @id @default(cuid())
  title      String?        @db.Char(50)
  headimgurl String?
  slug       String?        @db.Char(100)
  content    String?
  imgurls    String
  createdat  DateTime       @default(now())
  updatedat  DateTime       @updatedAt
  post       post[]
  tags       posttags[]
  parent     postcategory[] @relation("postcategory")
  child      postcategory[] @relation("postcategory")
}
model postmeta {
  id        String   @id @default(cuid())
  title     String?
  key       String?
  value     String?
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
  post      post[]
}

model posttags {
  id           String         @id @default(cuid())
  tag          String?
  post         post[]
  postcategory postcategory[]
}


model postcomment {
  id        String        @id @default(cuid())
  content   String
  createdat DateTime      @default(now())
  updatedat DateTime      @updatedAt
  userid    String?
  postid    String?
  user      user?         @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  post      post?         @relation(fields: [postid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  parent    postcomment[] @relation("postcommentparenting")
  child     postcomment[] @relation("postcommentparenting")
}


enum mediatype { 
  IMG
  VID
  AUD
}
model media {
  id          String @id @default(cuid())
  url         String
  title       String?
  mediatype   mediatype?
  description String?
  ariaLabel   String?
}