// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url      = env("DATABASE_URL")
}




//--------------------------------------
//
//
//
//           permission MODELS
//
//
//
//--------------------------------------




model role{
  id String @id @default(cuid())
  name String
  description String?
  roles String?
  groups group[]
}

model group{
  id String @id @default(cuid())
  name String ?
  rules role[]
  user user[]
}









//------------------------------------
//
//         USER MODELS
//
//------------------------------------

model Account {
  id                String  @id @default(cuid()) 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  userId            String
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model user {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String
  lastname      String  
  email         String?   @unique
  password      String?
  phonenumber   String?   @unique
  emailVerified DateTime?
  image         String?
  cart          cart[]
  accounts      Account[]
  sessions      Session[]
  groups        group[]
  wishproduct   product[]
  orders        order[]
  transaction   transaction[]
  productcomment productcomment[]
  productrating productrating[]
  productreview productreview[]
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartid       String
  cart         cart[]    
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}









//----------------------------
//
//        SHOP MODELS
//
//----------------------------

enum  producttype {
 PSC
 DIG
}

enum productstatus {
  ACTIVE
  DEACTIVE
  NOPROCE
  OUT
  NOTAVIL
}

model product{
  id             String          @id  @default(cuid())
  title          String 
  slug           String
  summary        String
  type           producttype     @default(PSC)
  cartitem       cartitem[]
  sku            String?
  minquant       Int             @default(1)
  price          Int?
  discount       Int             @default(0)
  quant          Int             @default(0)
  status         productstatus   @default(ACTIVE)
  rating         Float?
  ratingcount    Int             @default(0)
  imageid        String[]
  createdAT      DateTime        @default(now())
  updatedAT      DateTime        @updatedAt
  startedAT      DateTime        @default(now())
  comments       productcomment[]
  meta           meta[]
  tag            tags[]
  orderitem      orderitem[]
  productprop    productprop[]
  productrating  productrating[]
  productreview  productreview[]
  category       category[]
  variants       productvariant[]
  wish           user[]


  shopid String
  shop   shop   @relation(fields: [shopid],references: [id])

}

model productprop {
  id                   String                 @id @default(cuid())
  title                String
  product              product[]
  producpropertiestype producproptype[]
  
}

model producproptype {
  id               String                 @id @default(cuid())
  title            String?
  parent           producproptype[] @relation("producpropertiestype")
  child            producproptype[] @relation("producpropertiestype")
  productprop productprop[]

}
model productvariant {
  id        String        @id @default(cuid())
  value     String?
  sku       String?
  price     Int?
  productid String?
  status    productstatus @default(ACTIVE)
  product   product?      @relation(fields: [productid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}
model productreview {
  id          String   @id @default(cuid())
  title       String?
  userid      String?
  productid   String?
  content     String?
  iframeurl   String?
  createdat   DateTime @default(now())
  updatedat   DateTime @updatedAt
  publishedat DateTime @default(now())
  user        user?    @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  product     product? @relation(fields: [productid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}
model productrating {
  id        String   @id @default(cuid())
  userid    String?
  productid String?
  rate      Int?
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
  user      user?    @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  product   product? @relation(fields: [productid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}

model productmeta {
  id        String   @id @default(cuid())
  title     String?
  value     String?
  createdat DateTime @default(now())
  updatedat DateTime @default(now())
}

model productcomment {
  id        String              @id @default(cuid())
  title     String              @db.Char(50)
  content   String
  createdat DateTime            @default(now())
  updatedat DateTime            @updatedAt
  deletedat DateTime?
  productid String
  product   product             @relation(fields: [productid],references: [id])
  userid    String?
  user      user?               @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  tags      productcommenttag[]
  parent    productcomment[]    @relation("productcomment")
  child     productcomment[]    @relation("productcomment")
}

model productcommenttag {
  id              String           @id @default(cuid())
  tag             String?
  pos             Boolean?
  procductcomment productcomment[]
}


model tags {
  id        String     @id @default(cuid())
  title     String?
  createdat DateTime   @default(now())
  updatedat DateTime   @updatedAt
  meta      tagmeta[]
  category  category[]
  product   product[]
}
model tagmeta {
  id    String  @id @default(cuid())
  title String?
  value String?
  tag   tags[]
}

model meta {
  id       String     @id @default(cuid())
  title    String?
  value    String?
  meta     String?
  product  product[]
  category category[]

}


model category {
  id        String     @id @default(cuid())
  title     String?
  slug      String?
  imgid     String?
  content   String?
  active    Boolean    @default(true)
  tags      tags[]
  meta      meta[]
  createdat DateTime   @default(now())
  updatedat DateTime   @updatedAt
  product   product[]
  parent    category[] @relation("categoryParenting")
  child     category[] @relation("categoryParenting")
}





enum Cartstatus {
  DEACTIVATED
  ACTIVE
  PASS
  ABANDONED
}
model cart {
  id            String    @id @default(cuid())
  token         String
  cartstatus    Cartstatus

  createdAT     DateTime @default(now())
  updatedAT     DateTime @updatedAt
  deactivatedAT DateTime?

  cartitems     cartitem[] 

  userid        String?
  user          user?    @relation(fields: [userid],references: [id])

  sessionId String?  
  session   Session? @relation(fields:[sessionId],references: [id]) 
}

model cartitem{
  id     String   @id  @default(cuid())
  quant  Int      @default(1)
  price  Int?
  discount Int?
  cost     Int?
  active   Boolean @default(true)
  decribtion  String  @db.Text

  createdAT     DateTime @default(now())
  updatedAT     DateTime @updatedAt


  cartid   String?
  cart  cart? @relation(fields: [cartid],references: [id],onUpdate:Cascade,onDelete: Cascade)
  productid  String 
  product product @relation(fields: [productid],references: [id])
 
}
model shop{
  id String @id @default(cuid())
  title String 
  description  String
  products product[]
}





//-----------------------------------------------------------
//
//         payment
//
//-----------------------------------


model orderitem {
  id        String   @id @default(cuid())
  productid String?  @db.Char(40)
  orderid   String?  @db.Char(40)
  sku       String?  @db.Char(40)
  price     Int?
  discount  Int?
  quant     Int?
  active    Boolean  @default(true)
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
  order     order?   @relation(fields: [orderid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  product   product? @relation(fields: [productid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}



enum orderstatus {
  CHECKEDOUT
  PAid
  SHIPPED
  DONE
  ABANDONED
}
enum shipmenttype {
  POST
  ONDOOR
  INCITY
  DOORTEST
  DONE
}
enum shipmentstate {
  ININV
  READYFORPOST
  POST
  DELIVERED
}

model order {
  id            String        @id @default(cuid()) @db.Char(40)
  userid        String?       @db.Char(40)
  session       String?
  token         String?
  status        orderstatus   @default(CHECKEDOUT)
  subtotal      Int           @default(0)
  totaldiscount Int           @default(0)
  tax           Int           @default(0)
  shipment      shipmenttype  @default(POST)
  SHIPMENTCODE  String?
  shipmentstate shipmentstate @default(ININV)
  shipmentcost  Int           @default(0)
  total         Int           @default(0)
  promo         Int           @default(0)
  grandtotal    Int           @default(0)
  firstname     String?       @db.Char(40)
  lastname      String?       @db.Char(40)
  phonenumber   String?       @db.Char(15)
  country       String?       @db.Char(40)
  proviance     String?       @db.Char(40)
  city          String?       @db.Char(40)
  street        String?       @db.Char(40)
  createdat     DateTime      @default(now())
  updatedat     DateTime      @updatedAt
  user          user?         @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  orderitem     orderitem[]
  transaction   transaction[]
}




enum transactionstatus {
  FACTOR
  INORDER
  DONE
  FAILD
}

enum transactiontype {
  ONDOOR
  BANKGW
  BNCARD
  BCNPAY
}
enum transactionbank {
  BMI
  SEP
  ZAR
  idP
  ZIB
  BHM
  MLT
}
model transaction {
  id        String            @id @default(cuid())
  userid    String?
  orderid   String?
  code      String?
  bank      transactionbank?
  type      transactiontype   @default(BANKGW)
  status    transactionstatus @default(FACTOR)
  createdat DateTime          @default(now())
  updatedat DateTime          @updatedAt
  content   String?
  user      user?             @relation(fields: [userid], references: [id],onDelete: SetNull, onUpdate: Cascade)
  order     order?            @relation(fields: [orderid], references: [id],onDelete: SetNull, onUpdate: Cascade)
}

